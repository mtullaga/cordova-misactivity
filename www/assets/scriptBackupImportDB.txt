importSqlToDb()
Executes a set of SQL statements against the defined database. Can be used to import data defined in the SQL statements into the database, and may additionally include commands to create the table structure.

cordova.plugins.sqlitePorter.importSqlToDb(db, sql, opts);
Parameters
{Database} db - open SQLite database to import into
{string} sql - SQL statements to execute against database.
{object} opts - optional parameters:
{function} successFn - callback function to execute once import is complete, called with arguments:
{integer} count - total number of statements executed in the given SQL string.
{function} errorFn - callback function to execute on error during import, called with arguments:
{object} error - object representing the error.
{function} progressFn - callback function to execute after each successful execution of SQL statement, called with arguments:
{integer} count - number of statements executed so far.
{integer} totalCount - total number of statements in the given SQL string.
Example usage
Create a database from a SQL dump

var db = window.openDatabase("Test", "1.0", "TestDB", 1 * 1024);
var sql = "CREATE TABLE Artist ([Id] PRIMARY KEY, [Title]);"+
    "INSERT INTO Artist(Id,Title) VALUES ('1','Fred');";
var successFn = function(count){
    alert("Successfully imported "+count+" SQL statements to DB");
};
var errorFn = function(error){
    alert("The following error occurred: "+error.message);
};
var progressFn = function(current, total){
    console.log("Imported "+current+"/"+total+" statements");
};
cordova.plugins.sqlitePorter.importSqlToDb(db, sql, {
    successFn: successFn,
    errorFn: errorFn,
    progressFn: progressFn
});



======================================================================================================================


exportDbToSql()
Exports a SQLite DB as a set of SQL statements.

cordova.plugins.sqlitePorter.exportDbToSql(db, opts);
Parameters
{Database} db - open SQLite database to export
{object} opts - optional parameters:
{function} successFn - callback function to execute after export is complete, with arguments:
{string} sql - exported SQL statements combined into a single string.
{integer} count - number of SQL statements in exported string.
{boolean} dataOnly - if true, only row data will be exported. Otherwise, table structure will also be exported. Defaults to false.
{boolean} structureOnly - if true, only table structure will be exported. Otherwise, row will also be exported. Defaults to false.
{array} tables - list of table names to export. If not specified, all tables will be exported.
Example usage
var db = window.openDatabase("Test", "1.0", "TestDB", 1 * 1024);
var successFn = function(sql, count){
    console.log("Exported SQL: "+sql);
    alert("Exported SQL contains "+count+" statements");
};
cordova.plugins.sqlitePorter.exportDbToSql(db, {
    successFn: successFn
});


=====================================================================================================================


importJsonToDb()
Converts table structure and/or row data contained within a JSON structure into SQL statements that can be executed against a SQLite database. Can be used to import data into the database and/or create the table structure.

cordova.plugins.sqlitePorter.importJsonToDb(db, json, opts);
Parameters
{Database} db - open SQLite database to import into
{string/object} json - JSON structure containing row data and/or table structure as either a JSON object or string
{object} opts - optional parameters:
{function} successFn - callback function to execute once import is complete, called with arguments:
{integer} count - total number of statements executed in the given SQL string.
{function} errorFn - callback function to execute on error during import, called with arguments:
{object} error - object representing the error.
{function} progressFn - callback function to execute after each successful execution of SQL statement, called with arguments:
{integer} count - number of statements executed so far.
{integer} totalCount - total number of statements in the given SQL string.
{integer} batchInsertSize - maximum number of inserts to batch into a SQL statement using UNION SELECT method. Defaults to 250 if not specified. Set to 1 to disable batching and perform 1 insert per SQL statement. You can tweak this to optimize performance but numbers higher than 500 may cause the app to run out of memory and crash.
The structure

Example usage
Create a database from a SQL dump

var db = window.openDatabase("Test", "1.0", "TestDB", 1 * 1024);
var json = {
    "structure":{
        "tables":{
            "Artist":"([Id] PRIMARY KEY, [Title])"
        },
       "otherSQL": [
            "CREATE UNIQUE INDEX Artist_ID ON Artist(Id)"
       ]
    },
    "data":{
        "inserts":{
            "Artist":[
                {"Id":"1","Title":"Fred"},
                {"Id":"2","Title":"Bob"},
                {"Id":"3","Title":"Jack"},
                {"Id":"4","Title":"John"}
            ]
        }
    }
};
var successFn = function(count){
    alert("Successfully imported JSON to DB; equivalent to "+count+" SQL statements");
};
var errorFn = function(error){
    alert("The following error occurred: "+error.message);
};
var progressFn = function(current, total){
    console.log("Imported "+current+"/"+total+" statements";
};
cordova.plugins.sqlitePorter.importJsonToDb(db, json, {
    successFn: successFn,
    errorFn: errorFn,
    progressFn: progressFn,
    batchInsertSize: 500
});
Update an existing database

var db = window.openDatabase("Test", "1.0", "TestDB", 1 * 1024);
var json = {
    "data":{
        "inserts":{
            "Artist":[
                {"Id":"1","Title":"Fred"},
                {"Id":"2","Title":"Bob"}
            ]
        },
        "updates":{
            "Artist":
                [
                    {
                        "set": {"Title":"Jill"},
                        "where": {"Id":"3"}
                    },
                    {
                        "set": {"Title":"Susan"},
                        "where": {"Id":"4"}
                    }
                ]
            },
        },
        "deletes":{
            "Artist":[
                {"Id":"5"},
                {"Id":"6"}
            ]
        }
    }
};
var successFn = function(count){
    alert("Successfully imported JSON to DB; equivalent to "+count+" SQL statements");
};
var errorFn = function(error){
    alert("The following error occurred: "+error.message);
};
var progressFn = function(current, total){
    console.log("Imported "+current+"/"+total+" statements";
};
cordova.plugins.sqlitePorter.importJsonToDb(db, json, {
    successFn: successFn,
    errorFn: errorFn,
    progressFn: progressFn
});



===================================================================================================================


exportDbToJson()
Exports a SQLite DB as a JSON structure

cordova.plugins.sqlitePorter.exportDbToJson(db, opts);
Parameters
{Database} db - open SQLite database to export
{object} opts - optional parameters:
{function} successFn - callback function to execute after export is complete, with arguments:
{object} json - exported JSON structure.
{integer} count - number of SQL statements that exported JSON structure corresponds to.
{boolean} dataOnly - if true, only row data will be exported. Otherwise, table structure will also be exported. Defaults to false.
{boolean} structureOnly - if true, only table structure will be exported. Otherwise, row will also be exported. Defaults to false.
{array} tables - list of table names to export. If not specified, all tables will be exported.
Example usage
var db = window.openDatabase("Test", "1.0", "TestDB", 1 * 1024);
var successFn = function(json, count){
        console.log("Exported JSON: "+json);
        alert("Exported JSON contains equivalent of "+count+" SQL statements");
    };
cordova.plugins.sqlitePorter.exportDbToJson(db, {
    successFn: successFn
});


======================================================================================================================


wipeDb()
Wipes all data from a database by dropping all existing tables.

cordova.plugins.sqlitePorter.wipeDb(db, opts);
Parameters
{Database} db - open SQLite database to wipe
{object} opts - optional parameters:
{function} successFn - callback function to execute once wipe is complete, called with arguments:
{integer} count - number of tables dropped.
{function} errorFn - callback function to execute on error during wipe, called with arguments:
{object} error - object representing the error.
{function} progressFn - callback function to execute after each successful table drop, called with arguments:
{integer} count - number of tables dropped so far.
{integer} totalCount - total number of tables to drop.
Example usage
var db = window.openDatabase("Test", "1.0", "TestDB", 1 * 1024);
var successFn = function(count){
    alert("Successfully wiped "+count+" tables");
};
var errorFn = function(error){
    alert("The following error occurred: "+error.message);
};
var progressFn = function(current, total){
    console.log("Wiped "+current+"/"+total+" tables";
};
cordova.plugins.sqlitePorter.wipeDb(db, {
    successFn: successFn,
    errorFn: errorFn,
    progressFn: progressFn
});